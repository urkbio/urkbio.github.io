<?xml version='1.0' encoding='utf-8'?>
<rss version="2.0"><channel><title>CHIU BLOG</title><link>https://chiu.joomaen.top</link><description>Sharing Technology and Life</description><language>zh-CN</language><lastBuildDate>Fri, 03 Jan 2025 11:22:29 +0800</lastBuildDate><item><title>macOS运行本地模型</title><link>https://chiu.joomaen.top/posts/macos运行本地模型-20250103.html</link><guid>https://chiu.joomaen.top/posts/macos运行本地模型-20250103.html</guid><pubDate>Fri, 03 Jan 2025 11:17:37 +0800</pubDate><description>&lt;h3&gt;使用ollama&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;安装&lt;a href="https://github.com/ollama/ollama"&gt;ollama&lt;/a&gt;：&lt;code&gt;brew install ollama&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动ollama服务：&lt;code&gt;brew services start ollama&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尝试跑一个3B的LLaMA 3.2，&lt;code&gt;ollama run llama3.2:3b&lt;/code&gt;，没下载的会自动下载，也可以在&lt;a href="https://ollama.com/library"&gt;这个网站&lt;/a&gt;下载其他模型。&lt;img src="https://media.joomaen.top/2025/01/1735863050.png" alt="截屏2025-01-03 08.10.40.png" /&gt;&lt;/li&gt;
&lt;li&gt;此时可以输入文字进行对话了，也可以输入&lt;code&gt;/bye&lt;/code&gt;退出对话框，然后使用一个其他的GUI工具接入本地大模型。
我在Mac上使用&lt;a href="https://apps.apple.com/us/app/enchanted-llm/id6474268307?l=zh-Hans-CN"&gt;Enchanted&lt;/a&gt;，它能自动识别到本地的模型，无须额外配置即可使用，如果本地有多个模型可以切换。在ollama的&lt;a href="https://github.com/ollama/ollama/blob/main/README.md"&gt;README.md&lt;/a&gt;页面底部也有许多其他的工具可以自己选择。&lt;/li&gt;
&lt;li&gt;我的最低配Mac mini上运行3B模型很轻松，最高运行7/8B的。10B以上的没试过。不过模型太小的话使用场景有限，不能把它当成通用型的，如果就是文字翻译和简单聊天的话还行，叫它讲个笑话都只能讲出不超过5行的，一点都不好笑。&lt;/li&gt;
&lt;li&gt;要停止的话：
&lt;ol&gt;
&lt;li&gt;停止模型：&lt;code&gt;ollama ollama stop llama3.2:3b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止ollama服务：&lt;code&gt;brew services stop ollama&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;使用LM Studio&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://lmstudio.ai/"&gt;LM Studio&lt;/a&gt;是一个带有GUI的工具，可以更简单的运行模型。并且内置有针对M芯片优化的MLX模型。
1. 安装LM Studio：&lt;code&gt;brew install --cask lm-studio&lt;/code&gt;
2. 进入后点击左侧discover🔍，这里有一些内置的模型供你选择，默认排序是按最匹配你的电脑的排在上方。选一个点击Download。&lt;img src="https://media.joomaen.top/2025/01/1735866082.png" alt="截屏2025-01-03 09.00.51.png" /&gt;
3. 下载好后点击左侧栏的Chat图标，点击顶部的框或按&lt;code&gt;⌘L&lt;/code&gt;选择你下载的模型，如果有多个也是在这里选择。
4. 之后就可以对话了。&lt;/p&gt;
</description><category>macOS</category><category>AI</category></item><item><title>解决macOS应用被损坏</title><link>https://chiu.joomaen.top/posts/解决macos应用被损坏-20250103.html</link><guid>https://chiu.joomaen.top/posts/解决macos应用被损坏-20250103.html</guid><pubDate>Fri, 03 Jan 2025 11:17:18 +0800</pubDate><description>&lt;h2&gt;&lt;img src="https://media.joomaen.top/2025/01/1735799249.png" alt="截屏2025-01-02 14.27.15.png" /&gt;&lt;/h2&gt;

&lt;h3&gt;1. 允许 “任何来源” 下载的 App 运行&lt;/h3&gt;

&lt;p&gt;打开 “终端” 执行如下命令（根据提示输入您的密码即可）：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo spctl --master-disable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开 “系统偏好设置…” - “安全性与隐私”，“通用” 标签页，如图勾选：
&lt;img src="https://media.joomaen.top/2025/01/1735799337.png" alt="截屏2025-01-02 14.28.43.png" /&gt;&lt;/p&gt;

&lt;h3&gt;2. 移除应用的安全隔离属性&lt;/h3&gt;

&lt;p&gt;打开 “终端” 执行如下命令（根据提示输入您的密码即可）：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo xattr -dr com.apple.quarantine /Applications/name.app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/Applications/name.app&lt;/code&gt; 如果不知道该如何输入，将 App 直接拖拽 &lt;code&gt;sudo xattr -rd com.apple.quarantine&lt;/code&gt;（中间有个空格）后面即可。&lt;/p&gt;

&lt;p&gt;一般情况下，多余的扩展属性都可以清除（个别应用例外）：&lt;/p&gt;

&lt;p&gt;可以直接输入：&lt;code&gt;sudo xattr -cr /Applications/*&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;3. macOS Ventura 额外步骤&lt;/h3&gt;

&lt;p&gt;如果还不能打开，则到系统设置 – 隐私和安全性，“安全性” 下面出现提示，点击 “仍要打开”，当然该操作仅需要一次，以后可以正常打开。&lt;/p&gt;

&lt;h3&gt;4. 重新签名&lt;/h3&gt;

&lt;p&gt;多数情况下，App 已经可以正常运行了，很多和谐软件因为证书问题，仍然无法打开。此时可以重新签名。&lt;/p&gt;

&lt;p&gt;打开 “终端”，执行如下命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;codesign --force --deep --sign - /Applications/name.app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前提条件&lt;/strong&gt;: 安装 Command Line Tools for Xcode&lt;/p&gt;

&lt;p&gt;此时会提示安装，或者使用终端命令在线安装：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;也可以到这里下载 Command Line Tools for Xcode：&lt;a href="https://sysin.org/blog/apple-xcode-14/" title="Xcode 14.3.1 (14E300c) - Apple 平台 IDE"&gt;Xcode 14.3.1 (14E300c) - Apple 平台 IDE&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;5. 覆盖恶意软件保护&lt;/h3&gt;

&lt;p&gt;还有一种情况，&lt;/p&gt;

&lt;p&gt;提示：“应用程序” 将对您的电脑造成伤害。您应该将它移到废纸篓。&lt;/p&gt;

&lt;p&gt;以上步骤操作后还是无法打开。&lt;/p&gt;

&lt;p&gt;解决办法：&lt;/p&gt;

&lt;p&gt;访达 -&gt; 应用程序 -&gt; 右击软件 -&gt; 显示简介，勾选 “覆盖恶意软件保护”。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;转载自：&lt;a href="https://sysin.org/blog/macos-if-crashes-when-opening/"&gt;sysin&lt;/a&gt;&lt;/p&gt;
</description><category>macOS</category></item><item><title>Nostr的Relay桥</title><link>https://chiu.joomaen.top/posts/nostr的relay桥-20250101.html</link><guid>https://chiu.joomaen.top/posts/nostr的relay桥-20250101.html</guid><pubDate>Wed, 01 Jan 2025 14:31:49 +0800</pubDate><description>&lt;ul&gt;
&lt;li&gt;项目：&lt;a href="https://github.com/duozhutuan/NostrBridge"&gt;NostrBridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;server.js&lt;/code&gt;中的监听端口&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以修改&lt;code&gt;server.js&lt;/code&gt;自定义端口&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用Nginx或其他反向代理该端口&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;启动命令：
```&lt;/p&gt;

&lt;h1&gt;进入目录&lt;/h1&gt;

&lt;p&gt;cd /opt/NostrBridge&lt;/p&gt;

&lt;h1&gt;用forever启动，设定日志到/dev/null 避免占用磁盘空间&lt;/h1&gt;

&lt;p&gt;forever start \
  -a \
  -l /dev/null \
  --minUptime 5000 \
  --spinSleepTime 2000 \
  src/server.js
```&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;也可以使用项目中的&lt;code&gt;cli.js&lt;/code&gt;实现本地relay桥&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;config.js&lt;/code&gt;中的localserver部分，改为自己的内网IP加端口，使用&lt;code&gt;ws://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;cli.js&lt;/code&gt;中添加需要桥接的远端relay&lt;/p&gt;

&lt;p&gt;在本地启动&lt;code&gt;node src/cli.js&lt;/code&gt;&lt;/p&gt;
</description><category>Nostr</category><category>server</category></item><item><title>2024.12.30</title><link>https://chiu.joomaen.top/posts/2024.12.30-20241230.html</link><guid>https://chiu.joomaen.top/posts/2024.12.30-20241230.html</guid><pubDate>Mon, 30 Dec 2024 13:26:12 +0800</pubDate><description>&lt;p&gt;我入手了Mac mini，现在最主要的电脑就是它了。12月初辞职了，希望明年能找到份工作吧，最近闲着，尝试各种新东西，AI相关的各个领域，比如写小说、绘画、写代码等，可这些要变现都没想象中那么容易，小说得依靠平台，审核挺严的，并非直接生成就能发表；绘画成本比较高，还没尝试；写代码也就做出了几个小的程序玩玩，对普通人来说门槛是低了，不过我觉得肯定是专业人士加AI才能大幅提升效率。&lt;/p&gt;

&lt;p&gt;我还尝试了无货源网店、做视频等等，但这些都是没办法一蹴而就的，我只算是亲身体会下。&lt;/p&gt;
</description><category>日常</category></item><item><title>Cloudflare回源绕过备案</title><link>https://chiu.joomaen.top/posts/cloudflare回源绕过备案-20241230.html</link><guid>https://chiu.joomaen.top/posts/cloudflare回源绕过备案-20241230.html</guid><pubDate>Mon, 30 Dec 2024 13:24:04 +0800</pubDate><description>&lt;h3&gt;针对国内云服务器又没有备案的解决方法，当然可以使用其他端口，比如直接使用8443也是可以开启HTTPS的，可是不够优雅。如果你能接受Cloudflare的延迟，可以通过建立Origin Rules实现重定向。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;反代服务端口设为 HTTP 8080；HTTPS 8443&lt;/li&gt;
&lt;li&gt;在cf中解析好对应域名、开启CDN&lt;/li&gt;
&lt;li&gt;在Cloudflare规则-Origin Rules中创建规则&lt;/li&gt;
&lt;li&gt;自定义筛选表达式—&amp;gt;主机名 等于 你的域名&lt;/li&gt;
&lt;li&gt;目标端口重写到8443&lt;/li&gt;
&lt;/ul&gt;
</description><category>技巧</category></item><item><title>更新目录结构</title><link>https://chiu.joomaen.top/posts/更新目录结构-20241229.html</link><guid>https://chiu.joomaen.top/posts/更新目录结构-20241229.html</guid><pubDate>Sun, 29 Dec 2024 15:04:24 +0800</pubDate><description>&lt;p&gt;修改博客输出目录结构，所有HTML文件将在一个文件夹中，更美观&lt;/p&gt;
</description><category>blog</category><category>test</category></item><item><title>搭建一个简单的NOSTR中继器</title><link>https://chiu.joomaen.top/posts/搭建一个简单的nostr中继器-20241229.html</link><guid>https://chiu.joomaen.top/posts/搭建一个简单的nostr中继器-20241229.html</guid><pubDate>Sun, 29 Dec 2024 14:41:30 +0800</pubDate><description>&lt;h1&gt;搭建一个简单的Nostr中继器&lt;/h1&gt;

&lt;h3&gt;使用项目：&lt;a href="https://code.pobblelabs.org/nostr_relay/index"&gt;nostr relay&lt;/a&gt; 一个python写的程序&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;pip&lt;/code&gt;安装：&lt;code&gt;pip install nostr-relay&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建一个目录&lt;code&gt;mkdir /opt/nostr&lt;/code&gt;，并进入目录 &lt;code&gt;cd /opt/nostr&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建一个配置文件，&lt;a href="https://code.pobblelabs.org/nostr_relay/file?name=nostr_relay/config.yaml"&gt;参考官方默认配置&lt;/a&gt; ，我的配置如下，修改了一点&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;```yaml
  DEBUG: false&lt;/p&gt;
  
  &lt;p&gt;relay&lt;em&gt;name: python relay
  relay&lt;/em&gt;description: relay written in python
  sysop&lt;em&gt;pubkey: 
  sysop&lt;/em&gt;contact: &lt;/p&gt;
  
  &lt;p&gt;storage:
    sqlalchemy.url: sqlite+aiosqlite:///nostr.sqlite3
    # the number of concurrent REQ queries sent to the db
    num&lt;em&gt;concurrent&lt;/em&gt;reqs: 10
    # the number of concurrent event saves. (sqlite can only support 1 writer at a time)
    num&lt;em&gt;concurrent&lt;/em&gt;adds: 2
    validators:
      - nostr&lt;em&gt;relay.validators.is&lt;/em&gt;not&lt;em&gt;too&lt;/em&gt;large
      - nostr&lt;em&gt;relay.validators.is&lt;/em&gt;signed
      - nostr&lt;em&gt;relay.validators.is&lt;/em&gt;recent
      - nostr&lt;em&gt;relay.validators.is&lt;/em&gt;not_hellthread&lt;/p&gt;
  
  &lt;p&gt;verification:
    # options are disabled, passive, enabled
    nip05&lt;em&gt;verification: disabled
    expiration: 86400 * 30
    update&lt;/em&gt;frequency: 3600
    #blacklist:
    # - badhost.biz
    #whitelist:
    # - goodhost.com&lt;/p&gt;
  
  &lt;p&gt;gunicorn:
    bind: 127.0.0.1:6969
    workers: 1
    loglevel: info
    reload: false&lt;/p&gt;
  
  &lt;p&gt;purple:
    host: 127.0.0.1
    port: 6969
    workers: 1
    disable_compression: true&lt;/p&gt;
  
  &lt;h1&gt;see docs/authentication.md&lt;/h1&gt;
  
  &lt;p&gt;authentication:
    enabled: false
    relay_urls: 
      - ws://localhost:6969
      - ws://127.0.0.1:6969
      # 可以换成 ws://公网IP:6969
      - wss://yourdomain.name
    actions:
      save: a
      query: a&lt;/p&gt;
  
  &lt;h1&gt;number of seconds to allow between client messages&lt;/h1&gt;
  
  &lt;p&gt;message_timeout: 1800&lt;/p&gt;
  
  &lt;h1&gt;number of open subscriptions per connection&lt;/h1&gt;
  
  &lt;p&gt;subscription_limit: 32&lt;/p&gt;
  
  &lt;h1&gt;set this to a private key used for internal control events&lt;/h1&gt;
  
  &lt;h1&gt;service_privatekey: 9627da965699a2a3048f97b77df5047e8cd0d11daca75e7687d0b28b65416a3c&lt;/h1&gt;
  
  &lt;h1&gt;set this to limit the number of events returned per REQ&lt;/h1&gt;
  
  &lt;p&gt;max_limit: 6000&lt;/p&gt;
  
  &lt;h1&gt;set this to the maximum number of "p" tags in an event&lt;/h1&gt;
  
  &lt;p&gt;hellthread_limit: 100
  ```&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用你喜欢的反向代理工具，配合域名使用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用systemd管理&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建service文件 &lt;code&gt;vim /etc/systemd/system/nostr-relay.service&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容为&lt;/p&gt;

&lt;p&gt;```
[Unit]
Description=Nostr Relay Service
After=network.target&lt;/p&gt;

&lt;p&gt;[Service]
Type=simple
User=root
WorkingDirectory=/opt/nostr
ExecStart=/usr/local/bin/nostr-relay -c /opt/nostr/config.yaml serve
Restart=always
RestartSec=5
StandardOutput=append:/opt/nostr/nostr-relay.log
StandardError=append:/opt/nostr/nostr-relay-error.log&lt;/p&gt;

&lt;p&gt;[Install]
WantedBy=multi-user.target
```&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存并退出。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重载systemd服务 &lt;code&gt;systemctl daemon-reload&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动并查看运行情况&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
systemctl start nostr-relay
systemctl status nostr-relay
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置开机自启 &lt;code&gt;systemctl enable nostr-relay&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description><category>nostr</category><category>服务器</category><category>linux</category></item><item><title>博客文件丢失</title><link>https://chiu.joomaen.top/posts/博客文件丢失-20241229.html</link><guid>https://chiu.joomaen.top/posts/博客文件丢失-20241229.html</guid><pubDate>Sun, 29 Dec 2024 00:35:09 +0800</pubDate><description>&lt;p&gt;我之前用AI写了个简陋的静态博客程序，用python来构建，将本地markdown文件可以转为HTML并可以很方便的托管到GitHub pages。&lt;/p&gt;

&lt;p&gt;我之前使用windows笔记本运行的，现在换了Mac，我想把仓库clone下来不就行了。不过遇到些问题，尽管clone了所有分支，不过没有将gh-pages分支绑定到&lt;code&gt;./output&lt;/code&gt;文件夹，好在有AI，用一个命令解决了 &lt;code&gt;git worktree add output gh-pages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我以为都万事大吉了，写了一篇build好了，准备推送到GitHub，可是推送之后我发现有的文章丢失了。我发现是因为这次构建时完全使用的GitHub上的文件和我新建的这一个，不过我上次写的markdown文件并没有推送到GitHub，我只把gh-pages分支推送了，master分支并没有推送，所以markdown源文件就不存在了，于是构建出来的HTML当然也不会显示这些旧文件。&lt;/p&gt;
</description><category>博客</category></item><item><title>verity</title><link>https://chiu.joomaen.top/posts/verity-20241224.html</link><guid>https://chiu.joomaen.top/posts/verity-20241224.html</guid><pubDate>Sun, 29 Dec 2024 00:03:17 +0800</pubDate><description>&lt;p&gt;This message is used to verify that this feed (feedId:94115645064285184) belongs to me (userId:72254986268311552). Join me in enjoying the next generation information browser https://follow.is.&lt;/p&gt;
</description><category>verity</category></item><item><title>一个简单的静态博客</title><link>https://chiu.joomaen.top/posts/一个简单的静态博客-20241224.html</link><guid>https://chiu.joomaen.top/posts/一个简单的静态博客-20241224.html</guid><pubDate>Sun, 29 Dec 2024 00:03:17 +0800</pubDate><description>&lt;p&gt;今天用AI写了一个静态网页，效果很好，一把就好了，AI写前端一点压力都没有。&lt;/p&gt;

&lt;p&gt;可是我不知道要展示些什么，于是就叫它改了改，做成一个静态博客。&lt;/p&gt;

&lt;p&gt;相比单一静态网页，就多了一个Python写的博客生成程序，用命令行可以很方便的管理，基本的添加、删除、生成、部署都很方便。我的目标是一个极其简陋的程序，一点多的花里胡哨都不需要，只要能将我写的markdown文件渲染成网页并展示出来就好。现在看来已经很完善了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现在王让它添加RSS功能，应该就完善了。&lt;/p&gt;
</description></item><item><title>Nostr etc</title><link>https://chiu.joomaen.top/posts/nostr-etc-20241228.html</link><guid>https://chiu.joomaen.top/posts/nostr-etc-20241228.html</guid><pubDate>Sat, 28 Dec 2024 23:44:31 +0800</pubDate><description>&lt;p&gt;今天偶然看到一个博客主在使用Nostr，我在它刚出来时也关注过，当时的密钥也早已经找不到了。今天重新试用了一下，发现好复杂，不如传统的Mastodon和Misskey这种。当然它貌似没有一个中心服务器，你在客户端的操作必须链接到至少一个中继服务器，才能被其他人看到。当然也可以自建一个服务器自己使用，据说这种协议不需要存储其他服务器的内容，只有处于同一个中继才能相互发现？我搞不太明白。&lt;/p&gt;

&lt;p&gt;除了刚出来时候许多人在使用，现在不知道还有多少热衷于中Nostr的，感觉不是很成熟，虽然这个理念比Mastodon这种更加先进，但也有不少问题。也会发生被盗用账户的情况。&lt;/p&gt;

&lt;p&gt;最近刷小红书比较多，才发现小红书的算法推荐如此严重，以前我认为算法推荐是好的，能更好的帮助你在网络上发现有共同爱好的人，发现你想关注的事物。可是我发现无论如何，最终都是广告，现在更多的是那种软广，我现在已经不敢相信任何人的分享了，潜意识里觉得他说这个东西好肯定是推销，虽然不尽如此。&lt;/p&gt;
</description><category>nostr</category></item><item><title>AI写代码体验</title><link>https://chiu.joomaen.top/posts/ai写代码体验-20241225.html</link><guid>https://chiu.joomaen.top/posts/ai写代码体验-20241225.html</guid><pubDate>Wed, 25 Dec 2024 23:34:26 +0800</pubDate><description>&lt;p&gt;这几天除了使用Cursor，我还发现了另一款AI写代码程序，叫windsurf。我两款都体验了，做了几个小工具，今天详细跟大家聊聊使用的感受吧。后面再跟大家分享下用windsurf新开发的静态博客程序。&lt;/p&gt;

&lt;p&gt;首先我先用的cursor，最开始写了几个简单的命令行工具，比如把配置文件的json和YAML相互转换，还有视频音频不同格式的转换，都是很快，基本上对话一两次就能运行了，所以AI处理这些很简单的需求是很容易的。之后我又把音视频格式转换这个程序做成了桌面端APP，有了一个图形界面，像一个简化版的格式工厂。这个步骤也没有很麻烦。&lt;/p&gt;

&lt;p&gt;再之后呢，我就想做一个类似ADGUARD home的DNS工具，后面也做出来了。像基础的缓存、指定上游、web界面、统计数据都有了。不过到后面功能一多起来，就有点力不从心了，有时候改十几次都无法修好一个问题，比如使用Redis作为DNS缓存，开始有一版能用，我是用的内置redis-server.exe来实现的，不过当我想编译到Linux版本运行在服务器上时就一直出错，不管是用WSL2还是用Ubuntu的服务器，当然我把redis-server可执行文件换成了Linux版，给了权限，就是无法启动。后面我又把Redis给去掉了。还有前端界面，我让它给我用一个柱状图和一个曲线图来展示统计数据，也搞了许久，总是无法读取到数据。&lt;/p&gt;

&lt;p&gt;反正越是复杂就越不智能，这与我在网上看到的cursor的牛逼感觉不太一样。或许因为我不会写代码，可那些一周做出app并上架的人也说自己是小白啊。&lt;/p&gt;

&lt;p&gt;在DNS那个程序一直无法按我的需求运行时，我也没有心思搞下去了。不过这时我看到了windsurf，这个也是类似cursor的魔改VSCode的东西，我安装下来，本来对它期望不大，因为许多人说cursor更好。但实际用下来才发现，windsurf在理解已有文件上比cursor好得多。我把用cursor写的文件夹导入windsurf，它可以读取项目文件，告诉我这个程序是做什么的，还能给出修改意见。于是我叫它给我做了一个静态网页，本来是想做出个人主页哪种，但我不知道应该放些什么，就索性让它再改改，做成一个静态博客。它还很贴心的告诉我如何部署到GitHub pages上，一切都很顺利。我觉得比cursor好的点是，它在修bug时可以检查所有相关联的文件从而找到问题所在，并且修改时也会同时修改有关的好几个文件。而用cursor的话，就算我一直@codebase，他也不是能从项目整体的角度来分析问题。&lt;/p&gt;

&lt;p&gt;尽管windsurf在开发上很快，基本上一个需求就对话一两次就好了，唯一一个问题，就是博客主页面的排序问题，好几次都没修好，我发现原来是它没有权限读取到编译好的output文件夹的前端文件代码，我把代码复制给它，他就一下子找到了问题并解决了。就这也没有多少次调试，比起我用一晚上cursor做不好DNS数据统计显示来说强多了。但它也没那么牛逼，我把DNS程序的代码给它看，也半天整不出来，或许是项目稍微复杂点就力不从心了。&lt;/p&gt;

&lt;p&gt;我昨天到今天做的这个静态博客程序，我打算把它作为自己博客的一个备份，一直放在GitHub，我就一切从简，只做了基本的标签和RSS功能。目前就先这样吧，后面想起什么比较必要的功能再交给AI来实现。&lt;/p&gt;

&lt;p&gt;由于cursor和windsurf都是付费软件，免费体验额度不够用，我是闲鱼合租的，不到20一个月，虽说有次数限制，不过我目前还没用超。&lt;/p&gt;
</description><category>体验分享</category></item><item><title>新版本更新</title><link>https://chiu.joomaen.top/posts/新版本更新-20241225.html</link><guid>https://chiu.joomaen.top/posts/新版本更新-20241225.html</guid><pubDate>Wed, 25 Dec 2024 21:12:42 +0800</pubDate><description>&lt;p&gt;今天修复了首页文章排列顺序异常的问题。
在创建markdown文件时头部生成一个&lt;code&gt;create_at&lt;/code&gt;字段来显示创建时间，然后&lt;code&gt;build&lt;/code&gt;时检查这个字符来排序，从新到旧。&lt;/p&gt;
</description><category>test</category></item><item><title>test-created-at</title><link>https://chiu.joomaen.top/posts/test-created-at-20241225.html</link><guid>https://chiu.joomaen.top/posts/test-created-at-20241225.html</guid><pubDate>Wed, 25 Dec 2024 21:07:55 +0800</pubDate><description>&lt;p&gt;Write your content here...&lt;/p&gt;
</description></item><item><title>test1</title><link>https://chiu.joomaen.top/posts/test1-20241225.html</link><guid>https://chiu.joomaen.top/posts/test1-20241225.html</guid><pubDate>Wed, 25 Dec 2024 20:55:41 +0800</pubDate><description>&lt;p&gt;Write your content here...&lt;/p&gt;

&lt;p&gt;第二次测试&lt;/p&gt;
</description><category>test</category></item><item><title>newtest</title><link>https://chiu.joomaen.top/posts/newtest-20241225.html</link><guid>https://chiu.joomaen.top/posts/newtest-20241225.html</guid><pubDate>Wed, 25 Dec 2024 20:41:57 +0800</pubDate><description>&lt;p&gt;Write your content here...&lt;/p&gt;

&lt;p&gt;this test file is used to check the update order.&lt;/p&gt;
</description><category>test</category></item></channel></rss>